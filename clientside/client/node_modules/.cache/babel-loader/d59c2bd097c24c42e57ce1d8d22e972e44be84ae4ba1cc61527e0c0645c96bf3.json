{"ast":null,"code":"var _jsxFileName = \"/home/atharav/react/model/Triton-App/clientside/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [models, setModels] = useState([]); // State to hold deployed models\n  const [selectedModel, setSelectedModel] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [result, setResult] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // Fetch deployed models when the component mounts\n  useEffect(() => {\n    fetchDeployedModels();\n  }, []);\n  const fetchDeployedModels = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/metrics/\");\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setModels(Object.keys(data)); // Assuming the response contains a dictionary of metrics keyed by model names\n    } catch (error) {\n      console.error(\"Failed to fetch deployed models:\", error);\n    }\n  };\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleInference = async () => {\n    if (!selectedModel || !file) {\n      alert(\"Please select a model and upload a file.\");\n      return;\n    }\n    setLoading(true);\n    const formData = new FormData();\n    formData.append(\"model_name\", selectedModel);\n    formData.append(\"file\", file);\n    try {\n      const response = await fetch(\"http://localhost:5000/inference/\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      await fetchResults();\n    } catch (error) {\n      console.error(\"Inference request failed:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchResults = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/results/\");\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setResult(data.result);\n    } catch (error) {\n      console.error(\"Failed to fetch results:\", error);\n    }\n  };\n  const handleFeedback = async isCorrect => {\n    try {\n      const response = await fetch(\"http://localhost:5000/feedback/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          model_name: selectedModel,\n          correct: isCorrect\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Failed to submit feedback:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ModelSelector, {\n      models: models,\n      setSelectedModel: setSelectedModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleInference,\n      children: \"Send Client Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Inference Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => handleFeedback(true),\n        children: \"Satisfied\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => handleFeedback(false),\n        children: \"Unsatisfied\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HKBY0nV3BS6T/zxHQOOXqMX4r6A=\");\n_c = App;\nfunction ModelSelector({\n  models,\n  setSelectedModel\n}) {\n  const handleChange = event => {\n    setSelectedModel(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Choose a model:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), models.map(model => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: model,\n        children: model\n      }, model, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_c2 = ModelSelector;\nfunction Button({\n  onClick,\n  children\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onClick,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 10\n  }, this);\n}\n_c3 = Button;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ModelSelector\");\n$RefreshReg$(_c3, \"Button\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","models","setModels","selectedModel","setSelectedModel","file","setFile","result","setResult","loading","setLoading","fetchDeployedModels","response","fetch","ok","Error","status","data","json","Object","keys","error","console","handleFileChange","event","target","files","handleInference","alert","formData","FormData","append","method","body","fetchResults","handleFeedback","isCorrect","headers","JSON","stringify","model_name","correct","children","ModelSelector","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","Button","onClick","_c","handleChange","value","map","model","_c2","_c3","$RefreshReg$"],"sources":["/home/atharav/react/model/Triton-App/clientside/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [models, setModels] = useState([]); // State to hold deployed models\n  const [selectedModel, setSelectedModel] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [result, setResult] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // Fetch deployed models when the component mounts\n  useEffect(() => {\n    fetchDeployedModels();\n  }, []);\n\n  const fetchDeployedModels = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/metrics/\");\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setModels(Object.keys(data)); // Assuming the response contains a dictionary of metrics keyed by model names\n    } catch (error) {\n      console.error(\"Failed to fetch deployed models:\", error);\n    }\n  };\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const handleInference = async () => {\n    if (!selectedModel || !file) {\n      alert(\"Please select a model and upload a file.\");\n      return;\n    }\n\n    setLoading(true);\n\n    const formData = new FormData();\n    formData.append(\"model_name\", selectedModel);\n    formData.append(\"file\", file);\n\n    try {\n      const response = await fetch(\"http://localhost:5000/inference/\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      await fetchResults();\n    } catch (error) {\n      console.error(\"Inference request failed:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchResults = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/results/\");\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setResult(data.result);\n    } catch (error) {\n      console.error(\"Failed to fetch results:\", error);\n    }\n  };\n\n  const handleFeedback = async (isCorrect) => {\n    try {\n      const response = await fetch(\"http://localhost:5000/feedback/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ model_name: selectedModel, correct: isCorrect }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Failed to submit feedback:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <ModelSelector models={models} setSelectedModel={setSelectedModel} />\n      <input type=\"file\" onChange={handleFileChange} />\n      <Button onClick={handleInference}>Send Client Files</Button>\n      {loading && <p>Loading...</p>}\n      {result && (\n        <div>\n          <h2>Inference Result</h2>\n          <p>{result}</p>\n          <Button onClick={() => handleFeedback(true)}>Satisfied</Button>\n          <Button onClick={() => handleFeedback(false)}>Unsatisfied</Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction ModelSelector({ models, setSelectedModel }) {\n  const handleChange = (event) => {\n    setSelectedModel(event.target.value);\n  };\n\n  return (\n    <div>\n      <p>Choose a model:</p>\n      <select onChange={handleChange}>\n        <option value=\"\">Select a model</option>\n        {models.map((model) => (\n          <option key={model} value={model}>\n            {model}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n\nfunction Button({ onClick, children }) {\n  return <button onClick={onClick}>{children}</button>;\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}